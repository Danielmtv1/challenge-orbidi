from typing import Generic, TypeVar, Type, Optional, List, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete
from sqlalchemy.orm import DeclarativeMeta

ModelType = TypeVar("ModelType", bound=DeclarativeMeta)

from src.core.exceptions import NotFoundException
import logging

ModelType = TypeVar("ModelType", bound=DeclarativeMeta)

logger = logging.getLogger(__name__)

class BaseRepository(Generic[ModelType]):
    """
    Base Repository with common CRUD operations and caching support
    """
    def __init__(self, model: Type[ModelType]):
        self.model = model

    async def get(self, db: AsyncSession, id: int) -> Optional[ModelType]:
        """Get a single record by ID with caching"""
        try:
            query = select(self.model).where(self.model.id == id)
            result = await db.execute(query)
            instance = result.scalar_one_or_none()
            
            if not instance:
                raise NotFoundException(f"{self.model.__name__} with id {id} not found")
            
            return instance
        except Exception as e:
            logger.error(f"Error fetching {self.model.__name__} with id {id}: {str(e)}")
            raise

    async def get_multi(
        self,
        db: AsyncSession,
        *,
        skip: int = 0,
        limit: int = 100,
        filters: dict = None,
        order_by: list = None
    ) -> List[ModelType]:
        """Get multiple records with filtering and ordering"""
        try:
            query = select(self.model)

            if filters:
                for field, value in filters.items():
                    query = query.where(getattr(self.model, field) == value)

            if order_by:
                query = query.order_by(*order_by)

            query = query.offset(skip).limit(limit)
            result = await db.execute(query)
            return result.scalars().all()
        except Exception as e:
            logger.error(f"Error fetching multiple {self.model.__name__}: {str(e)}")
            raise

    async def create(
        self,
        session: AsyncSession,
        *, 
        obj_in: dict
    ) -> ModelType:
        """Create a new record"""
        try:
            # Create a new instance of the model from the provided dictionary
            db_obj = self.model(**obj_in)

            # Add the new object to the session
            session.add(db_obj)
            
            # Commit the transaction asynchronously
            await session.commit()

            # Refresh the object to get updated fields (like autogenerated IDs)
            await session.refresh(db_obj)

            return db_obj

        except Exception as e:
            # Rollback on error to avoid leaving the session in an inconsistent state
            await session.rollback()
            logger.error(f"Error creating {self.model.__name__}: {str(e)}")
            raise
        
    async def update(
        self,
        db: AsyncSession,
        *,
        id: int,
        obj_in: dict
    ) -> Optional[ModelType]:
        """Update an existing record"""
        try:
            query = (
                update(self.model)
                .where(self.model.id == id)
                .values(**obj_in)
                .returning(self.model)
            )
            result = await db.execute(query)
            await db.commit()
            return result.scalar_one_or_none()
        except Exception as e:
            await db.rollback()
            logger.error(f"Error updating {self.model.__name__} with id {id}: {str(e)}")
            raise

    async def delete(self, db: AsyncSession, *, id: int) -> bool:
        """Delete a record"""
        try:
            query = delete(self.model).where(self.model.id == id)
            result = await db.execute(query)
            await db.commit()
            return result.rowcount > 0
        except Exception as e:
            await db.rollback()
            logger.error(f"Error deleting {self.model.__name__} with id {id}: {str(e)}")
            raise